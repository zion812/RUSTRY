# generated/phase3/ci/phase3.yml

name: Phase 3 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/phase3-* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: 34
  ANDROID_BUILD_TOOLS_VERSION: '34.0.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
      
    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Run lint
      run: ./gradlew lintDebug
      
    - name: Upload lint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results
        path: app/build/reports/lint-results-debug.html

  instrumented-tests:
    name: Instrumented Tests
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [24, 29, 34]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        script: ./gradlew connectedAndroidTest
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: instrumented-test-results-api-${{ matrix.api-level }}
        path: app/build/reports/androidTests/connected/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Upload debug APK
      uses: actions/upload-artifact@v3
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk

  build-release:
    name: Build Release AAB
    runs-on: ubuntu-latest
    needs: [test, instrumented-tests, security-scan]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Decode keystore
      env:
        ENCODED_STRING: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo $ENCODED_STRING | base64 -d > keystore.jks
        
    - name: Build release AAB
      env:
        KEYSTORE_PATH: ../keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: ./gradlew bundleRelease
      
    - name: Upload release AAB
      uses: actions/upload-artifact@v3
      with:
        name: release-aab
        path: app/build/outputs/bundle/release/app-release.aab

  firebase-distribution:
    name: Firebase App Distribution
    runs-on: ubuntu-latest
    needs: [build-release]
    if: github.ref == 'refs/heads/develop' || contains(github.ref, 'feature/phase3')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release AAB
      uses: actions/download-artifact@v3
      with:
        name: release-aab
        path: ./
        
    - name: Upload to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
        groups: beta-testers
        file: app-release.aab
        releaseNotes: |
          Phase 3 Beta Release
          
          New Features:
          - Breeding Analytics Dashboard
          - Verified Transfer System
          - Family Tree Visualization
          - Vaccination Scheduler
          - Coupon System
          - Listing Boost Feature
          
          Build: ${{ github.sha }}
          Branch: ${{ github.ref_name }}

  play-store-internal:
    name: Deploy to Play Store Internal Track
    runs-on: ubuntu-latest
    needs: [build-release]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release AAB
      uses: actions/download-artifact@v3
      with:
        name: release-aab
        path: ./
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        
    - name: Install Fastlane
      run: |
        gem install fastlane
        
    - name: Create service account file
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
      run: |
        echo "$GOOGLE_PLAY_SERVICE_ACCOUNT" > google-play-service-account.json
        
    - name: Deploy to Play Store Internal Track
      env:
        KEYSTORE_PATH: ../keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
      run: |
        cd fastlane
        fastlane deploy_internal

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [build-release, firebase-distribution, play-store-internal]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: needs.build-release.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#mobile-releases'
        text: |
          ‚úÖ Phase 3 CI/CD Pipeline Completed Successfully
          
          üì± Build: ${{ github.sha }}
          üåø Branch: ${{ github.ref_name }}
          üë§ Author: ${{ github.actor }}
          
          üîó [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on Failure
      if: needs.build-release.result == 'failure' || needs.firebase-distribution.result == 'failure' || needs.play-store-internal.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#mobile-releases'
        text: |
          ‚ùå Phase 3 CI/CD Pipeline Failed
          
          üì± Build: ${{ github.sha }}
          üåø Branch: ${{ github.ref_name }}
          üë§ Author: ${{ github.actor }}
          
          üîó [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [notify-slack]
    if: always()
    
    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          debug-apk
          release-aab
          lint-results
        failOnError: false