package com.rio.rustry.data.local.dao

import androidx.room.*
import com.rio.rustry.data.model.Fowl
import kotlinx.coroutines.flow.Flow

/**
 * Room DAO for fowl data with comprehensive caching support
 */
@Dao
interface FowlDao {
    
    @Query("SELECT * FROM fowls ORDER BY createdAt DESC")
    suspend fun getAllFowls(): List<Fowl>
    
    @Query("SELECT * FROM fowls ORDER BY createdAt DESC")
    fun getAllFowlsFlow(): Flow<List<Fowl>>
    
    @Query("SELECT * FROM fowls WHERE id = :id")
    suspend fun getFowlById(id: String): Fowl?
    
    @Query("SELECT * FROM fowls WHERE id = :id")
    fun getFowlByIdFlow(id: String): Flow<Fowl?>
    
    @Query("SELECT * FROM fowls WHERE ownerId = :ownerId ORDER BY createdAt DESC LIMIT :limit OFFSET :offset")
    suspend fun getFowlsByOwner(ownerId: String, limit: Int, offset: Int): List<Fowl>
    
    @Query("SELECT * FROM fowls WHERE isForSale = 1 AND isAvailable = 1 ORDER BY createdAt DESC LIMIT :limit OFFSET :offset")
    suspend fun getAvailableFowls(limit: Int, offset: Int): List<Fowl>
    
    @Query("SELECT * FROM fowls WHERE name LIKE :query OR breed LIKE :query ORDER BY createdAt DESC")
    suspend fun searchFowls(query: String): List<Fowl>
    
    @Query("SELECT * FROM fowls WHERE breed = :breed AND isAvailable = 1 ORDER BY createdAt DESC")
    suspend fun getFowlsByBreed(breed: String): List<Fowl>
    
    @Query("SELECT * FROM fowls WHERE price BETWEEN :minPrice AND :maxPrice AND isAvailable = 1 ORDER BY price ASC")
    suspend fun getFowlsByPriceRange(minPrice: Double, maxPrice: Double): List<Fowl>
    
    @Query("SELECT * FROM fowls WHERE isSynced = 0")
    suspend fun getUnsyncedFowls(): List<Fowl>
    
    @Query("SELECT COUNT(*) FROM fowls WHERE isSynced = 0")
    suspend fun getUnsyncedFowlsCount(): Int
    
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertFowl(fowl: Fowl)
    
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertFowls(fowls: List<Fowl>)
    
    @Update
    suspend fun updateFowl(fowl: Fowl)
    
    @Query("DELETE FROM fowls WHERE id = :id")
    suspend fun deleteFowl(id: String)
    
    @Query("DELETE FROM fowls")
    suspend fun deleteAllFowls()
    
    @Query("DELETE FROM fowls WHERE createdAt < :timestamp")
    suspend fun deleteOldFowls(timestamp: Long)
}