// generated/phase3/app/src/main/java/com/rio/rustry/transfers/TransferViewModel.kt

package com.rio.rustry.transfers

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.rio.rustry.data.model.Fowl
import com.rio.rustry.data.model.Transfer
import com.rio.rustry.domain.usecase.CreateTransferUseCase
import com.rio.rustry.domain.usecase.VerifyTransferUseCase
import com.rio.rustry.domain.repository.FowlRepository
import com.rio.rustry.domain.repository.TransferRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class TransferViewModel(
    private val createTransferUseCase: CreateTransferUseCase,
    private val verifyTransferUseCase: VerifyTransferUseCase,
    private val fowlRepository: FowlRepository,
    private val transferRepository: TransferRepository
) : ViewModel() {

    private val _uiState = MutableStateFlow<TransferUiState>(TransferUiState.Loading)
    val uiState: StateFlow<TransferUiState> = _uiState.asStateFlow()

    fun loadUserFowls() {
        viewModelScope.launch {
            try {
                val fowls = fowlRepository.getUserFowls()
                _uiState.value = TransferUiState.FowlsLoaded(fowls)
            } catch (e: Exception) {
                _uiState.value = TransferUiState.Error(e.message ?: "Failed to load fowls")
            }
        }
    }

    fun initiateTransfer(fowlId: String, recipient: String, contactMethod: ContactMethod) {
        viewModelScope.launch {
            try {
                val transferId = createTransferUseCase(fowlId, recipient, contactMethod)
                _uiState.value = TransferUiState.TransferInitiated(transferId)
            } catch (e: Exception) {
                _uiState.value = TransferUiState.Error(e.message ?: "Failed to initiate transfer")
            }
        }
    }

    fun loadTransfer(transferId: String) {
        viewModelScope.launch {
            try {
                val transfer = transferRepository.getTransfer(transferId)
                _uiState.value = TransferUiState.TransferLoaded(transfer)
            } catch (e: Exception) {
                _uiState.value = TransferUiState.Error(e.message ?: "Failed to load transfer")
            }
        }
    }

    fun loadTransferHistory() {
        viewModelScope.launch {
            try {
                val transfers = transferRepository.getUserTransfers()
                _uiState.value = TransferUiState.TransfersLoaded(transfers)
            } catch (e: Exception) {
                _uiState.value = TransferUiState.Error(e.message ?: "Failed to load transfer history")
            }
        }
    }

    fun filterTransfers(filter: TransferFilter) {
        viewModelScope.launch {
            try {
                val transfers = transferRepository.getUserTransfers()
                val filteredTransfers = when (filter) {
                    TransferFilter.ALL -> transfers
                    TransferFilter.SENT -> transfers.filter { it.fromUid == getCurrentUserId() }
                    TransferFilter.RECEIVED -> transfers.filter { it.toUid == getCurrentUserId() }
                    TransferFilter.PENDING -> transfers.filter { it.status.name == "PENDING" }
                    TransferFilter.VERIFIED -> transfers.filter { it.status.name == "VERIFIED" }
                    TransferFilter.REJECTED -> transfers.filter { it.status.name == "REJECTED" }
                }
                _uiState.value = TransferUiState.TransfersLoaded(filteredTransfers)
            } catch (e: Exception) {
                _uiState.value = TransferUiState.Error(e.message ?: "Failed to filter transfers")
            }
        }
    }

    fun scanNfcTag(transferId: String) {
        viewModelScope.launch {
            try {
                // Simulate NFC scan
                transferRepository.addProofData(transferId, "nfc_scan", "nfc_tag_data")
            } catch (e: Exception) {
                _uiState.value = TransferUiState.Error(e.message ?: "Failed to scan NFC tag")
            }
        }
    }

    fun capturePhoto(transferId: String) {
        viewModelScope.launch {
            try {
                // Simulate photo capture
                transferRepository.addProofData(transferId, "photo", "photo_url")
            } catch (e: Exception) {
                _uiState.value = TransferUiState.Error(e.message ?: "Failed to capture photo")
            }
        }
    }

    fun generateTransferProof(transferId: String) {
        viewModelScope.launch {
            try {
                verifyTransferUseCase(transferId)
                loadTransfer(transferId) // Reload to show updated status
            } catch (e: Exception) {
                _uiState.value = TransferUiState.Error(e.message ?: "Failed to generate proof")
            }
        }
    }

    fun shareTransferProof(transferId: String) {
        // Implementation for sharing transfer proof
        // This would typically use Android's share intent
    }

    private fun getCurrentUserId(): String {
        // Implementation to get current user ID
        return "current_user_id"
    }
}

sealed class TransferUiState {
    object Loading : TransferUiState()
    data class FowlsLoaded(val fowls: List<Fowl>) : TransferUiState()
    data class TransferInitiated(val transferId: String) : TransferUiState()
    data class TransferLoaded(val transfer: Transfer) : TransferUiState()
    data class TransfersLoaded(val transfers: List<Transfer>) : TransferUiState()
    data class Error(val message: String) : TransferUiState()
}